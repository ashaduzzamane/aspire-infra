AWSTemplateFormatVersion: 2010-09-09
Description: This template provisions IAM groups, an automation user, and users with read-only permission

Parameters:
  UserPassword:
    Type: String
    Default: 'AspirePassword123!'
  MaxPasswordAge:
    Type: 'Number'
    Description: 'Maximum age for passwords'
    Default: 90
    ConstraintDescription: '(90-365 days)'
    MinValue: 90
    MaxValue: 365
  MinPasswordLength:
    Type: 'Number'
    Description: 'Minimum password length'
    Default: 14
    ConstraintDescription: '(14-128 characters)'
    MinValue: 14
    MaxValue: 128
  PasswordHistory:
    Type: 'Number'
    Description: 'Number of previous passwords to remember'
    Default: 3
    ConstraintDescription: '(1-24 passwords)'
    MinValue: 1
    MaxValue: 24
  RequireLowercaseChars:
    Type: 'String'
    Description: 'Require at least one lowercase character'
    Default: 'True'
    AllowedValues:
    - 'True'
    - 'False'
  RequireNumbers:
    Type: 'String'
    Description: 'Require at least one number'
    Default: 'True'
    AllowedValues:
    - 'True'
    - 'False'
  RequireSymbols:
    Type: 'String'
    Description: 'Require at least one symbol'
    Default: 'True'
    AllowedValues:
    - 'True'
    - 'False'
  RequireUppercaseChars:
    Type: 'String'
    Description: 'Require at least one uppercase character'
    Default: 'True'
    AllowedValues:
    - 'True'
    - 'False'

Resources:
  IAMPasswordPolicy:
    Type: 'Custom::IAMPolicyResource'
    Properties:
      ServiceToken: !GetAtt IAMPasswordPolicyResource.Arn
      Region: !Ref "AWS::Region"
      Policies:
      - PolicyName: GetFunctionConfigPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: 'Allow'
            Action:
            - 'lambda:GetFunctionConfiguration'
            Resource: '*'

  IAMPasswordPolicyResource:
    Type: "AWS::Lambda::Function"
    Properties:
      Runtime: python3.6
      Handler: index.lambda_handler
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt IAMPasswordPolicyResourceExecutionRole.Arn
      Code:
        ZipFile: !Sub |
          import boto3
          from botocore.exceptions import ClientError
          import json
          import cfnresponse
          iam = boto3.client("iam")
          # Lambda entry point
          def lambda_handler(event, context):
            if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
              res, reason = update_policy()
            elif event['RequestType'] == 'Delete':
              res, reason = delete_policy()
            else:
              res = False
              reason = "Unknown operation: " + event['RequestType']
            responseData = {}
            responseData['Reason'] = reason
            if res:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
            else:
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
          def update_policy():
            try:
              response = iam.update_account_password_policy(
                  AllowUsersToChangePassword=True,
                  HardExpiry=False,
                  MaxPasswordAge=${MaxPasswordAge},
                  MinimumPasswordLength=${MinPasswordLength},
                  RequireLowercaseCharacters=${RequireLowercaseChars},
                  RequireNumbers=${RequireNumbers},
                  RequireSymbols=${RequireSymbols},
                  RequireUppercaseCharacters=${RequireUppercaseChars},
                  PasswordReusePrevention=${PasswordHistory})
              return(True, response)
            except Exception as e:
              return (False, "Cannot update policy: " + str(e))
          def delete_policy():
            try:
              policy = iam.get_account_password_policy()
              response = iam.delete_account_password_policy()
              return (True, response)
            except Exception as e:
              return (False, "Cannot delete policy: " + str(e))

  IAMPasswordPolicyResourceExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: IAMPasswordCreatorPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: 'Allow'
            Action:
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Resource: '*'
          - Effect: Allow
            Action:
              - iam:GetAccountPasswordPolicy
              - iam:UpdateAccountPasswordPolicy
              - iam:DeleteAccountPasswordPolicy
            Resource: "*"
  
  AutomationPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: AutomationPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Sid: DeployCFN
          Effect: Allow
          Action:
            - 'cloudformation:*'
          Resource:
            - '*'
        - Sid: PreventCFNDeletion
          Effect: Deny
          Action:
            - 'cloudformation:DeleteStack'
          Resource:
            - '*'
        - Sid: UpdateUsersAndPermissions
          Effect: Allow
          Action:
            - 'iam:CreateRole'
            - 'iam:CreateUser'
            - 'iam:CreateGroup'
            - 'iam:DetachRolePolicy'
            - 'iam:AttachRolePolicy'
            - 'iam:DeleteRole'
            - 'iam:DeleteRolePolicy'
            - 'iam:DeleteUser'
            - 'iam:GetRole'
            - 'iam:GetUser'
            - 'iam:PassRole'
            - 'iam:PutRolePolicy'
            - 'iam:GetRolePolicy'
            - 'iam:CreateServiceLinkedRole'
            - 'iam:UpdateLoginProfile'
            - 'iam:RemoveUserFromGroup'
            - 'iam:DeleteLoginProfile'
            - 'iam:ListAccessKeys'
            - 'iam:AddUserToGroup'
            - 'iam:CreateLoginProfile'
            - 'iam:PutGroupPolicy'
          Resource:
            - '*'
        - Sid: EnforceStrongPassword
          Effect: Allow
          Action: 
            - 'lambda:CreateFunction'
            - 'lambda:DeleteFunction'
            - 'lambda:GetFunction'
            - 'lambda:GetFunctionConfiguration'
            - 'lambda:GetLayerVersion'
            - 'lambda:AddPermission'
            - 'lambda:RemovePermission'
            - 'lambda:PublishLayerVersion'
            - 'lambda:UpdateFunctionCode'
            - 'lambda:ListTags'
            - 'lambda:TagResource'
            - 'lambda:UntagResource'
            - 'lambda:UpdateFunctionConfiguration'
            - 'lambda:InvokeFunction'
          Resource:
            - '*'
        - Sid: DeployAppToS3
          Effect: Allow
          Action:
            - 's3:CopyObject'
            - 's3:DeleteObject'
            - 's3:GetBucketLocation'
            - 's3:GetObject'
            - 's3:GetObjectAcl'
            - 's3:GetObjectTagging'
            - 's3:ListBucket'
            - 's3:ListObjectsV2'
            - 's3:ListObjects'
            - 's3:PutObject'
            - 's3:PutObjectTagging'
          Resource:
            - '*'
      Groups:
        - !Ref AutomationGroup

  WebAppPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: WebAppPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action:
          - appsync:*
          - apigateway:POST
          - apigateway:DELETE
          - apigateway:PATCH
          - apigateway:PUT
          - cloudformation:CreateStack
          - cloudformation:CreateStackSet
          - cloudformation:DeleteStack
          - cloudformation:DeleteStackSet
          - cloudformation:DescribeStackEvents
          - cloudformation:DescribeStackResource
          - cloudformation:DescribeStackResources
          - cloudformation:DescribeStackSet
          - cloudformation:DescribeStackSetOperation
          - cloudformation:DescribeStacks
          - cloudformation:UpdateStack
          - cloudformation:UpdateStackSet
          - cloudfront:CreateCloudFrontOriginAccessIdentity
          - cloudfront:CreateDistribution
          - cloudfront:DeleteCloudFrontOriginAccessIdentity
          - cloudfront:DeleteDistribution
          - cloudfront:GetCloudFrontOriginAccessIdentity
          - cloudfront:GetCloudFrontOriginAccessIdentityConfig
          - cloudfront:GetDistribution
          - cloudfront:GetDistributionConfig
          - cloudfront:TagResource
          - cloudfront:UntagResource
          - cloudfront:UpdateCloudFrontOriginAccessIdentity
          - cloudfront:UpdateDistribution
          - cognito-identity:CreateIdentityPool
          - cognito-identity:DeleteIdentityPool
          - cognito-identity:DescribeIdentity
          - cognito-identity:DescribeIdentityPool
          - cognito-identity:SetIdentityPoolRoles
          - cognito-identity:UpdateIdentityPool
          - cognito-idp:CreateUserPool
          - cognito-idp:CreateUserPoolClient
          - cognito-idp:DeleteUserPool
          - cognito-idp:DeleteUserPoolClient
          - cognito-idp:DescribeUserPool
          - cognito-idp:UpdateUserPool
          - cognito-idp:UpdateUserPoolClient
          - dynamodb:CreateTable
          - dynamodb:DeleteItem
          - dynamodb:DeleteTable
          - dynamodb:DescribeTable
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:UpdateTable
          - iam:CreateRole
          - iam:DeleteRole
          - iam:DeleteRolePolicy
          - iam:GetRole
          - iam:GetUser
          - iam:PassRole
          - iam:PutRolePolicy
          - iam:UpdateRole
          - lambda:AddPermission
          - lambda:CreateFunction
          - lambda:DeleteFunction
          - lambda:GetFunction
          - lambda:GetFunctionConfiguration
          - lambda:InvokeAsync
          - lambda:InvokeFunction
          - lambda:RemovePermission
          - lambda:UpdateFunctionCode
          - lambda:UpdateFunctionConfiguration
          - s3:*
          - amplify:*
          Resource: "*"
      Groups:
        - !Ref WebAppGroup

  AutomationGroup:
    Type: AWS::IAM::Group

  DeveloperGroup:
    Type: AWS::IAM::Group
    Properties:
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/CloudWatchLogsReadOnlyAccess'
      - 'arn:aws:iam::aws:policy/AmazonRDSReadOnlyAccess'
      - 'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'
      - 'arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess'
      - 'arn:aws:iam::aws:policy/AWSLambdaReadOnlyAccess'
      - 'arn:aws:iam::aws:policy/IAMReadOnlyAccess'
      - 'arn:aws:iam::aws:policy/AmazonSESFullAccess'

  WebAppGroup:
    Type: AWS::IAM::Group
    Properties:
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/AmazonSESFullAccess'
  
  OpsGroup:
    Type: AWS::IAM::Group
    Properties:
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/AmazonSESFullAccess'
      - 'arn:aws:iam::aws:policy/AWSSupportAccess'

  AutomationUser:
    Type: AWS::IAM::User
    Properties:
      UserName: automation@maxgala.com
      Groups:
        - !Ref AutomationGroup
  
  WebAppUser:
    Type: AWS::IAM::User
    Properties:
      UserName: webapp@aspire.com
      Groups:
        - !Ref WebAppGroup
  
  OpsUser:
    Type: AWS::IAM::User
    Properties:
      UserName: ops@aspire.com
      Groups:
        - !Ref WebAppGroup
      LoginProfile:
        Password:
          Ref: UserPassword
        PasswordResetRequired: true

  SalehBakhit:
    Type: AWS::IAM::User
    Properties:
      UserName: saleh.bakhit@hotmail.com
      LoginProfile:
        Password:
          Ref: UserPassword
        PasswordResetRequired: true
      Groups:
        - !Ref DeveloperGroup

  AhmedHamodi:
    Type: AWS::IAM::User
    Properties:
      UserName: ahmed.r.hamodi@gmail.com
      LoginProfile:
        Password:
          Ref: UserPassword
        PasswordResetRequired: true
      Groups:
        - !Ref DeveloperGroup

  ArsalanRana:
    Type: AWS::IAM::User
    Properties:
      UserName: arsalan.rana@maxgala.com
      LoginProfile:
        Password:
          Ref: UserPassword
        PasswordResetRequired: true
      Groups:
        - !Ref DeveloperGroup

  TayyabTanveer:
    Type: AWS::IAM::User
    Properties:
      UserName: tayyaabtanveer@gmail.com
      LoginProfile:
        Password:
          Ref: UserPassword
        PasswordResetRequired: true
      Groups:
        - !Ref DeveloperGroup

  ShehryarSuleman:
    Type: AWS::IAM::User
    Properties:
      UserName: shehryarsuleman@gmail.com
      LoginProfile:
        Password:
          Ref: UserPassword
        PasswordResetRequired: true
      Groups:
        - !Ref DeveloperGroup

  NabaSiddiqui:
    Type: AWS::IAM::User
    Properties:
      UserName: naba@poketapp.com
      LoginProfile:
        Password:
          Ref: UserPassword
        PasswordResetRequired: true
      Groups:
        - !Ref DeveloperGroup

  HafsaZahid:
    Type: AWS::IAM::User
    Properties:
      UserName: hafsabzahid@gmail.com
      LoginProfile:
        Password:
          Ref: UserPassword
        PasswordResetRequired: true
      Groups:
        - !Ref DeveloperGroup

  AhmedJamal:
    Type: AWS::IAM::User
    Properties:
      UserName: ahmedjamal0208@gmail.com
      LoginProfile:
        Password:
          Ref: UserPassword
        PasswordResetRequired: true
      Groups:
        - !Ref DeveloperGroup

  RizTaha:
    Type: AWS::IAM::User
    Properties:
      UserName: riztaha@gmail.com
      LoginProfile:
        Password:
          Ref: UserPassword
        PasswordResetRequired: true
      Groups:
        - !Ref DeveloperGroup

  KashifSiddiqui:
    Type: AWS::IAM::User
    Properties:
      UserName: kashif89@gmail.com
      LoginProfile:
        Password:
          Ref: UserPassword
        PasswordResetRequired: true
      Groups:
        - !Ref DeveloperGroup