AWSTemplateFormatVersion: 2010-09-09
Description: This template provisions IAM groups, an automation user, and users with read-only permission

Parameters:
  UserPassword:
    Type: String
    Default: 'AspirePassword123!'
  MaxPasswordAge:
    Type: 'Number'
    Description: 'Maximum age for passwords'
    Default: 90
    ConstraintDescription: '(90-365 days)'
    MinValue: 90
    MaxValue: 365
  MinPasswordLength:
    Type: 'Number'
    Description: 'Minimum password length'
    Default: 14
    ConstraintDescription: '(14-128 characters)'
    MinValue: 14
    MaxValue: 128
  PasswordHistory:
    Type: 'Number'
    Description: 'Number of previous passwords to remember'
    Default: 3
    ConstraintDescription: '(1-24 passwords)'
    MinValue: 1
    MaxValue: 24
  RequireLowercaseChars:
    Type: 'String'
    Description: 'Require at least one lowercase character'
    Default: 'True'
    AllowedValues:
    - 'True'
    - 'False'
  RequireNumbers:
    Type: 'String'
    Description: 'Require at least one number'
    Default: 'True'
    AllowedValues:
    - 'True'
    - 'False'
  RequireSymbols:
    Type: 'String'
    Description: 'Require at least one symbol'
    Default: 'True'
    AllowedValues:
    - 'True'
    - 'False'
  RequireUppercaseChars:
    Type: 'String'
    Description: 'Require at least one uppercase character'
    Default: 'True'
    AllowedValues:
    - 'True'
    - 'False'

Resources:
  IAMPasswordPolicy:
    Type: 'Custom::IAMPolicyResource'
    Properties:
      ServiceToken: !GetAtt IAMPasswordPolicyResource.Arn
      Region: !Ref "AWS::Region"
      Policies:
      - PolicyName: GetFunctionConfigPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: 'Allow'
            Action:
            - 'lambda:GetFunctionConfiguration'
            Resource: '*'

  IAMPasswordPolicyResource:
    Type: "AWS::Lambda::Function"
    Properties:
      Runtime: python3.6
      Handler: index.lambda_handler
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt IAMPasswordPolicyResourceExecutionRole.Arn
      Code:
        ZipFile: !Sub |
          import boto3
          from botocore.exceptions import ClientError
          import json
          import cfnresponse
          iam = boto3.client("iam")
          # Lambda entry point
          def lambda_handler(event, context):
            if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
              res, reason = update_policy()
            elif event['RequestType'] == 'Delete':
              res, reason = delete_policy()
            else:
              res = False
              reason = "Unknown operation: " + event['RequestType']
            responseData = {}
            responseData['Reason'] = reason
            if res:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
            else:
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
          def update_policy():
            try:
              response = iam.update_account_password_policy(
                  AllowUsersToChangePassword=True,
                  HardExpiry=False,
                  MaxPasswordAge=${MaxPasswordAge},
                  MinimumPasswordLength=${MinPasswordLength},
                  RequireLowercaseCharacters=${RequireLowercaseChars},
                  RequireNumbers=${RequireNumbers},
                  RequireSymbols=${RequireSymbols},
                  RequireUppercaseCharacters=${RequireUppercaseChars},
                  PasswordReusePrevention=${PasswordHistory})
              return(True, response)
            except Exception as e:
              return (False, "Cannot update policy: " + str(e))
          def delete_policy():
            try:
              policy = iam.get_account_password_policy()
              response = iam.delete_account_password_policy()
              return (True, response)
            except Exception as e:
              return (False, "Cannot delete policy: " + str(e))

  IAMPasswordPolicyResourceExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: IAMPasswordCreatorPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: 'Allow'
            Action:
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Resource: '*'
          - Effect: Allow
            Action:
              - iam:GetAccountPasswordPolicy
              - iam:UpdateAccountPasswordPolicy
              - iam:DeleteAccountPasswordPolicy
            Resource: "*"

  DeveloperGroup:
    Type: AWS::IAM::Group
    Properties:
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/CloudWatchLogsReadOnlyAccess'
      - 'arn:aws:iam::aws:policy/AmazonRDSReadOnlyAccess'
      - 'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'
      - 'arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess'
      - 'arn:aws:iam::aws:policy/AWSLambdaReadOnlyAccess'
      - 'arn:aws:iam::aws:policy/IAMReadOnlyAccess'
  
  WebAppPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: WebAppPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Sid: CLICloudformationPolicy
          Effect: Allow
          Action:
          - cloudformation:CreateChangeSet
          - cloudformation:CreateStack
          - cloudformation:DeleteStack
          - cloudformation:DescribeChangeSet
          - cloudformation:DescribeStackEvents
          - cloudformation:DescribeStackResource
          - cloudformation:DescribeStackResources
          - cloudformation:DescribeStacks
          - cloudformation:ExecuteChangeSet
          - cloudformation:GetTemplate
          - cloudformation:UpdateStack
          Resource:
          - arn:aws:cloudformation:*:*:stack/amplify-*
        - Sid: CLIManageviaCFNPolicy
          Effect: Allow
          Action:
          - iam:CreateRole
          - iam:ListRoleTags
          - iam:TagRole
          - iam:AttachRolePolicy
          - iam:CreatePolicy
          - iam:DeletePolicy
          - iam:DeleteRole
          - iam:DeleteRolePolicy
          - iam:DetachRolePolicy
          - iam:PutRolePolicy
          - iam:UpdateRole
          - iam:GetRole
          - iam:GetPolicy
          - iam:GetRolePolicy
          - iam:PassRole
          - appsync:CreateApiKey
          - appsync:CreateDataSource
          - appsync:CreateFunction
          - appsync:CreateResolver
          - appsync:CreateType
          - appsync:DeleteApiKey
          - appsync:DeleteDataSource
          - appsync:DeleteFunction
          - appsync:DeleteResolver
          - appsync:DeleteType
          - appsync:GetDataSource
          - appsync:GetFunction
          - appsync:GetIntrospectionSchema
          - appsync:GetResolver
          - appsync:GetSchemaCreationStatus
          - appsync:GetType
          - appsync:GraphQL
          - appsync:ListApiKeys
          - appsync:ListDataSources
          - appsync:ListFunctions
          - appsync:ListGraphqlApis
          - appsync:ListResolvers
          - appsync:ListResolversByFunction
          - appsync:ListTypes
          - appsync:StartSchemaCreation
          - appsync:UpdateApiKey
          - appsync:UpdateDataSource
          - appsync:UpdateFunction
          - appsync:UpdateResolver
          - appsync:UpdateType
          - appsync:TagResource
          - appsync:CreateGraphqlApi
          - appsync:DeleteGraphqlApi
          - appsync:GetGraphqlApi
          - appsync:ListTagsForResource
          - appsync:UpdateGraphqlApi
          - apigateway:DELETE
          - apigateway:GET
          - apigateway:PATCH
          - apigateway:POST
          - apigateway:PUT
          - cognito-idp:CreateUserPool
          - cognito-identity:CreateIdentityPool
          - cognito-identity:DeleteIdentityPool
          - cognito-identity:DescribeIdentity
          - cognito-identity:DescribeIdentityPool
          - cognito-identity:SetIdentityPoolRoles
          - cognito-identity:GetIdentityPoolRoles
          - cognito-identity:UpdateIdentityPool
          - cognito-idp:CreateUserPoolClient
          - cognito-idp:DeleteGroup
          - cognito-idp:DeleteUserPool
          - cognito-idp:DeleteUserPoolClient
          - cognito-idp:DescribeUserPool
          - cognito-idp:DescribeUserPoolClient
          - cognito-idp:ListTagsForResource
          - cognito-idp:ListUserPoolClients
          - cognito-idp:UpdateUserPoolClient
          - cognito-idp:CreateGroup
          - cognito-idp:DeleteGroup
          - cognito-identity:TagResource
          - cognito-idp:TagResource
          - cognito-idp:UpdateUserPool
          - lambda:AddPermission
          - lambda:CreateFunction
          - lambda:DeleteFunction
          - lambda:GetFunction
          - lambda:GetFunctionConfiguration
          - lambda:InvokeAsync
          - lambda:InvokeFunction
          - lambda:RemovePermission
          - lambda:UpdateFunctionCode
          - lambda:UpdateFunctionConfiguration
          - lambda:ListTags
          - lambda:TagResource
          - lambda:UntagResource
          - lambda:DeleteFunction
          - lambda:AddLayerVersionPermission
          - lambda:CreateEventSourceMapping
          - lambda:DeleteEventSourceMapping
          - lambda:DeleteLayerVersion
          - lambda:GetEventSourceMapping
          - lambda:GetLayerVersion
          - lambda:ListEventSourceMappings
          - lambda:ListLayerVersions
          - lambda:PublishLayerVersion
          - lambda:RemoveLayerVersionPermission
          - dynamodb:CreateTable
          - dynamodb:DeleteItem
          - dynamodb:DeleteTable
          - dynamodb:DescribeContinuousBackups
          - dynamodb:DescribeTable
          - dynamodb:DescribeTimeToLive
          - dynamodb:ListStreams
          - dynamodb:PutItem
          - dynamodb:TagResource
          - dynamodb:ListTagsOfResource
          - dynamodb:UpdateContinuousBackups
          - dynamodb:UpdateItem
          - dynamodb:UpdateTable
          - dynamodb:UpdateTimeToLive
          - s3:CreateBucket
          - s3:ListBucket
          - s3:PutBucketAcl
          - s3:PutBucketCORS
          - s3:PutBucketNotification
          - s3:PutBucketPolicy
          - s3:PutBucketWebsite
          - s3:PutObjectAcl
          - cloudfront:CreateCloudFrontOriginAccessIdentity
          - cloudfront:CreateDistribution
          - cloudfront:DeleteCloudFrontOriginAccessIdentity
          - cloudfront:DeleteDistribution
          - cloudfront:GetCloudFrontOriginAccessIdentity
          - cloudfront:GetCloudFrontOriginAccessIdentityConfig
          - cloudfront:GetDistribution
          - cloudfront:GetDistributionConfig
          - cloudfront:TagResource
          - cloudfront:UntagResource
          - cloudfront:UpdateCloudFrontOriginAccessIdentity
          - cloudfront:UpdateDistribution
          - events:DeleteRule
          - events:DescribeRule
          - events:ListRuleNamesByTarget
          - events:PutRule
          - events:PutTargets
          - events:RemoveTargets
          - mobiletargeting:GetApp
          - kinesis:AddTagsToStream
          - kinesis:CreateStream
          - kinesis:DeleteStream
          - kinesis:DescribeStream
          - kinesis:PutRecords
          Resource: "*"
          Condition:
            ForAnyValue:StringEquals:
              aws:CalledVia:
              - cloudformation.amazonaws.com
        - Sid: CLISDKCalls
          Effect: Allow
          Action:
          - appsync:GetIntrospectionSchema
          - appsync:GraphQL
          - s3:PutObject
          - s3:GetObject
          - s3:ListBucket
          - s3:DeleteBucket
          - s3:DeleteBucketPolicy
          - s3:DeleteBucketWebsite
          - s3:DeleteObject
          - s3:GetBucketLocation
          - s3:ListAllMyBuckets
          - amplify:CreateApp
          - amplify:CreateBackendEnvironment
          - amplify:GetApp
          - amplify:GetBackendEnvironment
          - amplify:ListApps
          - amplify:ListBackendEnvironments
          - amplify:CreateBranch
          - amplify:GetBranch
          - amplify:UpdateApp
          - amplify:ListBranches
          - amplify:ListDomainAssociations
          - amplify:DeleteBranch
          - amplify:DeleteApp
          - amplify:DeleteBackendEnvironment
          - 'amplifybackend: *'
          - cognito-idp:AdminAddUserToGroup
          - cognito-idp:AdminCreateUser
          - cognito-idp:CreateGroup
          - cognito-idp:DeleteGroup
          - cognito-idp:DeleteUser
          - cognito-idp:ListUsers
          - cognito-idp:AdminGetUser
          - cognito-idp:ListUsersInGroup
          - cognito-idp:AdminDisableUser
          - cognito-idp:AdminRemoveUserFromGroup
          - cognito-idp:AdminResetUserPassword
          - cognito-idp:AdminListGroupsForUser
          - cognito-idp:ListGroups
          - cognito-idp:AdminDeleteUser
          - cognito-idp:AdminListUserAuthEvents
          - cognito-idp:AdminDeleteUser
          - cognito-idp:AdminConfirmSignUp
          - cognito-idp:AdminEnableUser
          - cognito-idp:AdminUpdateUserAttributes
          Resource: "*"
      Groups:
        - !Ref WebAppGroup

  AutomationPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: AutomationPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Sid: DeployCFN
          Effect: Allow
          Action:
            - 'cloudformation:*'
          Resource:
            - '*'
        - Sid: PreventCFNDeletion
          Effect: Deny
          Action:
            - 'cloudformation:DeleteStack'
          Resource:
            - '*'
        - Sid: UpdateUsersAndPermissions
          Effect: Allow
          Action:
            - 'iam:CreateRole'
            - 'iam:CreateUser'
            - 'iam:DetachRolePolicy'
            - 'iam:AttachRolePolicy'
            - 'iam:DeleteRole'
            - 'iam:DeleteRolePolicy'
            - 'iam:DeleteUser'
            - 'iam:GetRole'
            - 'iam:GetUser'
            - 'iam:PassRole'
            - 'iam:PutRolePolicy'
            - 'iam:GetRolePolicy'
            - 'iam:CreateServiceLinkedRole'
            - 'iam:UpdateLoginProfile'
            - 'iam:RemoveUserFromGroup'
            - 'iam:DeleteLoginProfile'
            - 'iam:ListAccessKeys'
            - 'iam:AddUserToGroup'
            - 'iam:CreateLoginProfile'
            - 'iam:PutGroupPolicy'
          Resource:
            - '*'
        - Sid: EnforceStrongPassword
          Effect: Allow
          Action: 
            - 'lambda:CreateFunction'
            - 'lambda:DeleteFunction'
            - 'lambda:GetFunction'
            - 'lambda:GetFunctionConfiguration'
            - 'lambda:GetLayerVersion'
            - 'lambda:AddPermission'
            - 'lambda:RemovePermission'
            - 'lambda:PublishLayerVersion'
            - 'lambda:UpdateFunctionCode'
            - 'lambda:ListTags'
            - 'lambda:TagResource'
            - 'lambda:UntagResource'
            - 'lambda:UpdateFunctionConfiguration'
            - 'lambda:InvokeFunction'
          Resource:
            - '*'
        - Sid: DeployAppToS3
          Effect: Allow
          Action:
            - 's3:CopyObject'
            - 's3:DeleteObject'
            - 's3:GetBucketLocation'
            - 's3:GetObject'
            - 's3:GetObjectAcl'
            - 's3:GetObjectTagging'
            - 's3:ListBucket'
            - 's3:ListObjectsV2'
            - 's3:ListObjects'
            - 's3:PutObject'
            - 's3:PutObjectTagging'
          Resource:
            - '*'
      Groups:
        - !Ref AutomationGroup

  AutomationGroup:
    Type: AWS::IAM::Group

  WebAppGroup:
    Type: AWS::IAM::Group    

  AutomationUser:
    Type: AWS::IAM::User
    Properties:
      UserName: automation@maxgala.com
      Groups:
        - !Ref AutomationGroup
  
  WebAppUser:
    Type: AWS::IAM::User
    Properties:
      UserName: webapp@maxgala.com
      Groups:
        - !Ref WebAppGroup

  SalehBakhit:
    Type: AWS::IAM::User
    Properties:
      UserName: saleh.bakhit@hotmail.com
      LoginProfile:
        Password:
          Ref: UserPassword
        PasswordResetRequired: true
      Groups:
        - !Ref DeveloperGroup

  AhmedHamodi:
    Type: AWS::IAM::User
    Properties:
      UserName: ahmed.r.hamodi@gmail.com
      LoginProfile:
        Password:
          Ref: UserPassword
        PasswordResetRequired: true
      Groups:
        - !Ref DeveloperGroup

  ArsalanRana:
    Type: AWS::IAM::User
    Properties:
      UserName: arsalan.rana@maxgala.com
      LoginProfile:
        Password:
          Ref: UserPassword
        PasswordResetRequired: true
      Groups:
        - !Ref DeveloperGroup

  TayyabTanveer:
    Type: AWS::IAM::User
    Properties:
      UserName: tayyaabtanveer@gmail.com
      LoginProfile:
        Password:
          Ref: UserPassword
        PasswordResetRequired: true
      Groups:
        - !Ref DeveloperGroup

  ShehryarSuleman:
    Type: AWS::IAM::User
    Properties:
      UserName: shehryarsuleman@gmail.com
      LoginProfile:
        Password:
          Ref: UserPassword
        PasswordResetRequired: true
      Groups:
        - !Ref DeveloperGroup

  NabaSiddiqui:
    Type: AWS::IAM::User
    Properties:
      UserName: naba@poketapp.com
      LoginProfile:
        Password:
          Ref: UserPassword
        PasswordResetRequired: true
      Groups:
        - !Ref DeveloperGroup

  HafsaZahid:
    Type: AWS::IAM::User
    Properties:
      UserName: hafsabzahid@gmail.com
      LoginProfile:
        Password:
          Ref: UserPassword
        PasswordResetRequired: true
      Groups:
        - !Ref DeveloperGroup

  AhmedJamal:
    Type: AWS::IAM::User
    Properties:
      UserName: ahmedjamal0208@gmail.com
      LoginProfile:
        Password:
          Ref: UserPassword
        PasswordResetRequired: true
      Groups:
        - !Ref DeveloperGroup

  RizTaha:
    Type: AWS::IAM::User
    Properties:
      UserName: riztaha@gmail.com
      LoginProfile:
        Password:
          Ref: UserPassword
        PasswordResetRequired: true
      Groups:
        - !Ref DeveloperGroup

  KashifSiddiqui:
    Type: AWS::IAM::User
    Properties:
      UserName: kashif89@gmail.com
      LoginProfile:
        Password:
          Ref: UserPassword
        PasswordResetRequired: true
      Groups:
        - !Ref DeveloperGroup